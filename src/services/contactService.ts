import fs from 'fs';
import path from 'path';
import { Lead, ContatoTipo } from '../types';
import { evolutionService } from './evolutionService';
import { leadService } from './leadService';
import { mondayService } from './mondayService';
import { edgeCaseHandler } from './edgeCaseHandler';
import { logger, logCrmAction } from '../utils/logger';
import { CONTATOS_CONFIG, PATHS } from '../config/constants';

class ContactService {
  // Processa o disparo de contato para um lead
  async processContactDispatch(lead: Lead): Promise<boolean> {
    try {
      // Valida√ß√£o e corre√ß√£o de dados do Monday
      const validation = await edgeCaseHandler.validateAndFixMondayData(lead.id);
      if (!validation.valid && !validation.fixed) {
        logCrmAction(lead.id, 'VALIDATION_FAILED', `Dados inv√°lidos: ${validation.issues.join(', ')}`, false);
        return false;
      }

      const config = CONTATOS_CONFIG[lead.statusAtual];
      
      // Verifica se o n√∫mero √© v√°lido para WhatsApp
      if (!evolutionService.isValidWhatsAppNumber(lead.telefone)) {
        logCrmAction(lead.id, 'INVALID_PHONE', `Telefone inv√°lido: ${lead.telefone}`, false);
        return false;
      }

      // L√™ o arquivo de texto usando fileManager ou usa texto inline
      let textoMensagem = await this.getProcessedMessage(config, lead.nome);
      
      if (!textoMensagem) {
        logCrmAction(lead.id, 'TEXT_ERROR', `Erro ao obter mensagem para ${config.tipo}`, false);
        return false;
      }

      // Tenta enviar mensagem de texto com retry autom√°tico
      let textSent = false;
      try {
        textSent = await evolutionService.sendTextMessage(lead.telefone, textoMensagem);
      } catch (error) {
        // Se falhou, usa o sistema de retry
        textSent = await edgeCaseHandler.handleEvoApiFailure(
          lead.telefone, 
          textoMensagem, 
          lead.id
        );
      }

      if (!textSent) {
        await leadService.incrementAttempts(lead.id);
        return false;
      }

      // Se tiver √°udio, envia tamb√©m
      if (config.arquivoAudio) {
        try {
          const audioSent = await evolutionService.sendAudioMessage(
            lead.telefone, 
            config.arquivoAudio,
            `Mensagem de √°udio - ${config.tipo}`
          );
          
          if (!audioSent) {
            logger.warn(`Text sent but audio failed for lead ${lead.id}`);
            // Tenta retry do √°udio
            await edgeCaseHandler.handleEvoApiFailure(
              lead.telefone, 
              `√Åudio: ${config.tipo}`, 
              lead.id,
              config.arquivoAudio
            );
          }
        } catch (error) {
          // Se √°udio falhar, tenta retry
          await edgeCaseHandler.handleEvoApiFailure(
            lead.telefone, 
            `√Åudio: ${config.tipo}`, 
            lead.id,
            config.arquivoAudio
          );
        }
      }

      // ‚ö†Ô∏è N√ÉO agenda mais pr√≥ximo contato aqui - ser√° feito pelo webhook
      // O Monday.com atualizar√° o status via automa√ß√£o e o webhook marcar√° a data
      
      logCrmAction(lead.id, 'CONTACT_DISPATCHED', `Contato ${config.tipo} enviado com sucesso`);
      return true;

    } catch (error) {
      logger.error(`Error processing contact dispatch for lead ${lead.id}:`, error);
      logCrmAction(lead.id, 'CONTACT_DISPATCH_ERROR', `Erro: ${error}`, false);
      return false;
    }
  }



  // üìù OBT√âM MENSAGEM PROCESSADA (nova abordagem modular) COM FALLBACK
  private async getProcessedMessage(config: any, nomeCliente: string): Promise<string | null> {
    try {
      logger.info(`üìù Processando mensagem para ${config.tipo}:`, {
        temArquivoTexto: !!config.arquivoTexto,
        temMensagemTexto: !!config.mensagemTexto,
        arquivoTexto: config.arquivoTexto,
        nomeCliente
      });

      const { fileManager } = await import('./fileManager');
      
      // Primeiro tenta ler do arquivo
      if (config.arquivoTexto) {
        logger.info(`üìÇ Tentando ler arquivo: ${config.arquivoTexto}`);
        const fileContent = await fileManager.readTextFile(config.arquivoTexto);
        
        if (fileContent) {
          logger.info(`‚úÖ Arquivo lido com sucesso, processando vari√°veis...`);
          const processedMessage = await fileManager.processMessage(fileContent, { nome: nomeCliente });
          logger.info(`üìù Mensagem final processada:`, { preview: processedMessage?.substring(0, 100) + '...' });
          return processedMessage;
        }
        logger.warn(`‚ùå Arquivo n√£o encontrado: ${config.arquivoTexto}, usando texto inline`);
      }
      
      // Fallback para texto inline
      if (config.mensagemTexto) {
        logger.info(`üìù Usando texto inline como fallback`);
        const processedMessage = await fileManager.processMessage(config.mensagemTexto, { nome: nomeCliente });
        logger.info(`üìù Mensagem inline processada:`, { preview: processedMessage?.substring(0, 100) + '...' });
        return processedMessage;
      }
      
      // üÜò FALLBACK FINAL: Templates hardcoded (para produ√ß√£o sem arquivos)
      logger.warn(`‚ö†Ô∏è Usando template hardcoded para ${config.tipo}`);
      return this.getHardcodedTemplate(config.tipo, nomeCliente);
      
    } catch (error) {
      logger.error(`‚ùå Erro ao processar mensagem para ${config.tipo}:`, error);
      // Em caso de erro, usar template hardcoded
      logger.warn(`üÜò Usando template hardcoded de emerg√™ncia para ${config.tipo}`);
      return this.getHardcodedTemplate(config.tipo, nomeCliente);
    }
  }

  // üÜò TEMPLATES HARDCODED (para quando arquivos n√£o est√£o dispon√≠veis)
  private getHardcodedTemplate(tipoContato: string, nomeCliente: string): string {
    const templates: Record<string, string> = {
      'Primeiro Contato': `Boa tarde ${nomeCliente}! Tudo bem?

√â realmente do seu interesse entender como estruturar uma opera√ß√£o de Drop Global para faturar 50 mil euros por m√™s?`,

      'Segundo Contato': `${nomeCliente}, tudo bem? - PRIMEIRA MENSAGEM

√â realmente do seu interesse entender como estruturar uma opera√ß√£o de Drop Global para faturar 50 mil euros por m√™s? - SEGUNDA MENSAGEM`,

      'Terceiro Contato': `${nomeCliente}, devido a falta de resposta, entendemos que n√£o √© do seu interesse entender como voc√™ pode faturar 50 mil euros por m√™s.

Com isso iremos tirar voc√™ da nossa base de contatos. Caso seja do seu interesse trocar essa papo, pode me sinalizar aqui.`,

      'Ultimo Contato': `${nomeCliente}, devido a falta de retorno, estamos tirando voc√™ da nossa lista. De qualquer maneira, obrigado.`
    };

    const template = templates[tipoContato];
    if (template) {
      logger.info(`‚úÖ Template hardcoded usado para ${tipoContato}`);
      return template;
    }

    // √öltimo recurso
    logger.error(`‚ùå Nenhum template encontrado para ${tipoContato}`);
    return `Ol√° ${nomeCliente}, entraremos em contato em breve.`;
  }

  // üìÑ M√âTODO LEGADO (mantido para compatibilidade)
  private async readTextFile(fileName: string, nomeCliente: string): Promise<string | null> {
    try {
      const filePath = path.join(PATHS.ASSETS, fileName);
      
      if (!fs.existsSync(filePath)) {
        logger.error(`Text file not found: ${filePath}`);
        return null;
      }

      const content = fs.readFileSync(filePath, 'utf-8');
      
      // Substitui placeholder do nome do cliente
      return content.replace(/\{nome\}/g, nomeCliente);
      
    } catch (error) {
      logger.error(`Error reading text file ${fileName}:`, error);
      return null;
    }
  }

  // Fun√ß√£o auxiliar para delay
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Cria arquivos de exemplo se n√£o existirem
  async createExampleFiles(): Promise<void> {
    try {
      // Garante que o diret√≥rio assets existe
      if (!fs.existsSync(PATHS.ASSETS)) {
        fs.mkdirSync(PATHS.ASSETS, { recursive: true });
        logger.info(`Created assets directory: ${PATHS.ASSETS}`);
      }

      // Conte√∫dos de exemplo
      const examples = {
        'primeiro-contato.txt': `Oi {nome}! üëã

Tudo bem? Aqui √© da equipe de vendas.

Recebemos seu interesse em nossos servi√ßos e queremos te apresentar uma oportunidade incr√≠vel!

Voc√™ tem alguns minutos para uma conversa r√°pida sobre como podemos te ajudar a alcan√ßar seus objetivos?

Aguardo seu retorno! üöÄ`,

        'segundo-contato.txt': `Oi {nome}! 

Passando aqui novamente para saber se voc√™ viu nossa mensagem anterior.

Temos uma proposta muito interessante que pode fazer a diferen√ßa no seu neg√≥cio.

Quando voc√™ teria um tempinho para conversarmos? 

√â s√≥ uns 15 minutinhos! üòä`,

        'terceiro-contato.txt': `{nome}, oi! 

√öltima tentativa por aqui... 

Sei que voc√™ est√° ocupado(a), mas realmente acredito que nossa solu√ß√£o pode te ajudar muito.

Se tiver interesse, me responde aqui que agendamos um hor√°rio que seja bom para voc√™.

Caso contr√°rio, sem problemas! 

Abra√ßo! ü§ù`,

        'ultimo-contato.txt': `{nome}, espero que esteja bem! 

Esta √© minha √∫ltima mensagem sobre nossa oportunidade.

Se mudou de ideia ou tiver interesse no futuro, estarei sempre dispon√≠vel.

Desejo muito sucesso para voc√™! 

Grande abra√ßo! ‚ú®`
      };

      // Cria arquivos de exemplo se n√£o existirem
      for (const [fileName, content] of Object.entries(examples)) {
        const filePath = path.join(PATHS.ASSETS, fileName);
        
        if (!fs.existsSync(filePath)) {
          fs.writeFileSync(filePath, content, 'utf-8');
          logger.info(`Created example file: ${fileName}`);
        }
      }

      logger.info('Example contact files are ready');

    } catch (error) {
      logger.error('Error creating example files:', error);
    }
  }
}

export const contactService = new ContactService();

// Fun√ß√£o exportada para uso nos controllers
export const processContactDispatch = contactService.processContactDispatch.bind(contactService);
